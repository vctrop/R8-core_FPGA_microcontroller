-------------------------------------------------------------------------
-- Design unit: R8 simutation test bench
-- Description: R8 processor connected to a BRAM memory
--      The BRAM memory is able to load image files generated by the R8 simulator             
-------------------------------------------------------------------------

library IEEE;
use IEEE.std_logic_1164.all;        

entity R8_uC_tb is
end R8_uC_tb;

architecture testbench of R8_uC_tb is
  

	signal clk : std_logic := '0';  
	signal rst: std_logic;
	signal port_io : std_logic_vector(15 downto 0);
	signal data_TX, data_RX : std_logic_vector(7 downto 0);
	signal rx, tx, mode: std_logic;
	
	signal TX_av, TX_ready : std_logic;
    
begin
    
    R8_uC: entity work.R8_uC(structural) 
        port map (
            board_clock     => clk,
            board_rst       => rst,
            port_io         => port_io,
            rx              => rx,
            tx              => tx,
			mode 			=> mode
        );
    
	
	-- UART_TX : entity work.UART_TX
    -- generic map(
        -- FREQ_BAUD_ADDR  => "01",
        -- TX_DATA_ADDR    => "00"
    -- )
    -- port map(
        -- clk         => clk,
        -- rst         => rst,
        -- data_av     => TX_av,
        -- address     => address_registers,
        -- data_in     => data_TX,
        -- tx          => tx,
        -- ready       => TX_ready
    -- );
    
    -- UART_RX : entity work.UART_RX
    -- port map(
        -- clk         => board_clock,
        -- rst         => rst,
        -- baud_av     => RX_baud_av,
        -- baud_in     => RX_baud_in,
        -- rx          => rx,
        -- data_out    => data_RX,
        -- data_av     => RX_av
    -- );
	DISP: entity work.Display_simulator
	port map(
        segment  => port_io(15 downto 8),
		digit    => OPEN
		
    );
    mode <= '0';
    -- Generates the clock signal            
    clk <= not clk after 10 ns;
    port_io(3) <= '0', '1' after 40 us, '0' after 80 us;
	port_io(2) <= '0', '1' after 40 us, '0' after 80 us;
    -- Generates the reset signal
    rst <='1', '0' after 5 ns;    
    
end testbench;
