-------------------------------------------------------------------------
-- Design unit: R8 simutation test bench
-- Description: R8 processor connected to a RAM memory
--      The RAM memory is able to load image files generated by the R8 simulator             
-------------------------------------------------------------------------

library IEEE;
use IEEE.std_logic_1164.all;        
use work.R8_pkg.all;

entity R8_tb is
end R8_tb;

architecture behavioral of R8_tb is
    
      signal clk : std_logic := '0';  
	  signal rst : std_logic;
	  
	  --*ATENÇÃO* EU ACHO Q O SINAL ADRESS DO CODIGO ORIGINAL NUNCA É UTLIZADO (AGORA VISTOS COMO ADRESS1 E ADRESS2)
      signal rw1, ce1,  ce_n1, we_n1, oe_n1 : std_logic;	--for structural testing
	  signal dataR8_1, dataBus1, addressR8_1, address1 : std_logic_vector(15 downto 0);  
	  signal rw2, ce2,  ce_n2, we_n2, oe_n2 : std_logic;	--for behavioral testing
	  signal dataR8_2, dataBus2, addressR8_2, address2 : std_logic_vector(15 downto 0); 
    
begin
    
    PROCESSOR_STRUCTURAL: entity work.R8(structural)
        port map (
            clk         => clk, 
            rst         => rst, 
            data_in     => dataBus1, 
            data_out    => dataR8_1, 
            address     => addressR8_1, 
            ce          => ce1, 
            rw          => rw1
        );
    
    
    RAM_STRUCTURAL : entity work.Memory   
        generic map (
           SIZE         => 1024,    -- 1024 words (2KB)
           imageFileName => "Todas_Instrucoes_R8.txt"
           --imageFileName => "selection_sort.txt"
        )
        port map (
            clk     => clk,
            ce_n    => ce_n1, 
            we_n    => we_n1, 
            oe_n    => oe_n1, 
            data    => dataBus1, 
            address => addressR8_1
        );
		
	
	PROCESSOR_BEHAVIORAL: entity work.R8(behavioral)
        port map (
            clk         => clk, 
            rst         => rst, 
            data_in     => dataBus2, 
            data_out    => dataR8_2, 
            address     => addressR8_2, 
            ce          => ce2, 
            rw          => rw2
        );
    
    
    RAM_BEHAVIORAL : entity work.Memory   
        generic map (
           SIZE         => 1024,    -- 1024 words (2KB)
           imageFileName => "Todas_Instrucoes_R8.txt"
           --imageFileName => "selection_sort.txt"
        )
        port map (
            clk     => clk,
            ce_n    => ce_n2, 
            we_n    => we_n2, 
            oe_n    => oe_n2, 
            data    => dataBus2, 
            address => addressR8_2
        );
    
    -- Generates the clock signal            
    clk <= not clk after 10 ns;
    
    -- Generates the reset signal
    rst <='1', '0' after 5 ns;        

    -- Memory access control signals       
    ce_n1 <= '0' when (ce1='1') else '1';
    oe_n1 <= '0' when (ce1='1' and rw1='1') else '1';       
    we_n1 <= '0' when (ce1='1' and rw1='0') else '1';    
        
    dataBus1 <= dataR8_1 when ce1 = '1' and rw1='0' else     -- Writing access
            (others => 'Z');    
  
	ce_n2 <= '0' when (ce2='1') else '1';
    oe_n2 <= '0' when (ce2='1' and rw2='1') else '1';       
    we_n2 <= '0' when (ce2='1' and rw2='0') else '1';    
        
    dataBus2 <= dataR8_2 when ce2 = '1' and rw2='0' else     -- Writing access
            (others => 'Z');    
    
end behavioral;